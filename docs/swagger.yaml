basePath: /api/v0/
definitions:
  api.Error:
    properties:
      error:
        type: string
    type: object
  config.BlockedPeer:
    properties:
      createdAt:
        description: Time of adding to config (decline invitation/remove from KnownPeers)
        type: string
      displayName:
        type: string
      peerId:
        description: Hex-encoded multihash representing a peer ID
        type: string
    type: object
  config.Config:
    properties:
      connManager: {}
      connectionGater: {}
      disablePing:
        type: boolean
      enableAutoRelay:
        type: boolean
      enableService:
        type: boolean
      forceReachability:
        type: integer
      insecure:
        type: boolean
      listenAddrs:
        items: {}
        type: array
      multiaddrResolver:
        $ref: '#/definitions/madns.Resolver'
      muxers:
        items:
          $ref: '#/definitions/config.MsMuxC'
        type: array
      peerKey: {}
      peerstore: {}
      psk:
        items:
          type: integer
        type: array
      relay:
        type: boolean
      relayCustom:
        type: boolean
      relayOpts:
        items:
          type: integer
        type: array
      reporter: {}
      securityTransports:
        items:
          $ref: '#/definitions/config.MsSecC'
        type: array
      staticRelays:
        items:
          $ref: '#/definitions/peer.AddrInfo'
        type: array
      throttleGlobalLimit:
        type: integer
      throttleInterval:
        type: integer
      throttlePeerLimit:
        type: integer
      userAgent:
        description: |-
          UserAgent is the identifier this node will send to other peers when
          identifying itself, e.g. via the identify protocol.

          Set it via the UserAgent option function.
        type: string
    type: object
  config.KnownPeer:
    properties:
      alias:
        description: User provided name
        type: string
      confirmed:
        description: Has remote peer confirmed our invitation
        type: boolean
      createdAt:
        description: Time of adding to config (accept/invite)
        type: string
      declined:
        description: Has remote peer declined our invitation
        type: boolean
      domainName:
        description: DomainName without zone suffix (.awl)
        type: string
      ipAddr:
        description: IPAddr used for forwarding
        type: string
      lastSeen:
        description: Time of last connection
        type: string
      name:
        description: Peer provided name
        type: string
      peerId:
        description: Hex-encoded multihash representing a peer ID
        type: string
    type: object
  config.MsMuxC:
    properties:
      id:
        type: string
    type: object
  config.MsSecC:
    properties:
      id:
        type: string
    type: object
  entity.AuthRequest:
    properties:
      name:
        type: string
      peerID:
        type: string
    type: object
  entity.BandwidthDebugInfo:
    properties:
      byProtocol:
        additionalProperties:
          $ref: '#/definitions/entity.BandwidthInfo'
        type: object
      total:
        $ref: '#/definitions/entity.BandwidthInfo'
    type: object
  entity.BandwidthInfo:
    properties:
      rateIn:
        type: string
      rateOut:
        type: string
      totalIn:
        type: string
      totalOut:
        type: string
    type: object
  entity.ConnectionsDebugInfo:
    properties:
      connectedPeersCount:
        type: integer
      lastTrimAgo:
        type: string
      openConnectionsCount:
        type: integer
      openStreamsCount:
        type: integer
      totalStreamsInbound:
        type: integer
      totalStreamsOutbound:
        type: integer
    type: object
  entity.DhtDebugInfo:
    properties:
      bootstrapPeers:
        additionalProperties:
          $ref: '#/definitions/p2p.BootstrapPeerDebugInfo'
        type: object
      listenAddress:
        items:
          type: string
        type: array
      observedAddrs:
        items:
          type: string
        type: array
      peersWithAddrsCount:
        type: integer
      reachability:
        enum:
        - Unknown
        - Public
        - Private
        type: string
      routingTable:
        items:
          $ref: '#/definitions/kbucket.PeerInfo'
        type: array
      routingTableSize:
        type: integer
    type: object
  entity.FriendRequest:
    properties:
      alias:
        type: string
      peerID:
        type: string
    required:
    - alias
    - peerID
    type: object
  entity.FriendRequestReply:
    properties:
      alias:
        type: string
      decline:
        type: boolean
      peerID:
        type: string
    required:
    - alias
    - peerID
    type: object
  entity.GeneralDebugInfo:
    properties:
      uptime:
        type: string
      version:
        type: string
    type: object
  entity.KnownPeersResponse:
    properties:
      alias:
        type: string
      confirmed:
        type: boolean
      connected:
        type: boolean
      connections:
        items:
          $ref: '#/definitions/p2p.ConnectionInfo'
        type: array
      declined:
        type: boolean
      displayName:
        description: 'Deprecated: useless, equal to Alias all the time'
        type: string
      domainName:
        type: string
      ipAddr:
        type: string
      lastSeen:
        type: string
      name:
        description: 'Deprecated: use DisplayName instead'
        type: string
      networkStats:
        $ref: '#/definitions/metrics.Stats'
      networkStatsInIECUnits:
        $ref: '#/definitions/entity.StatsInUnits'
      peerID:
        type: string
      version:
        type: string
    type: object
  entity.P2pDebugInfo:
    properties:
      bandwidth:
        $ref: '#/definitions/entity.BandwidthDebugInfo'
      connections:
        $ref: '#/definitions/entity.ConnectionsDebugInfo'
      dht:
        $ref: '#/definitions/entity.DhtDebugInfo'
      general:
        $ref: '#/definitions/entity.GeneralDebugInfo'
    type: object
  entity.PeerIDRequest:
    properties:
      peerID:
        type: string
    required:
    - peerID
    type: object
  entity.PeerInfo:
    properties:
      awlDNSAddress:
        type: string
      connectedBootstrapPeers:
        type: integer
      isAwlDNSSetAsSystem:
        type: boolean
      name:
        type: string
      networkStats:
        $ref: '#/definitions/metrics.Stats'
      networkStatsInIECUnits:
        $ref: '#/definitions/entity.StatsInUnits'
      peerID:
        type: string
      reachability:
        enum:
        - Unknown
        - Public
        - Private
        type: string
      serverVersion:
        type: string
      totalBootstrapPeers:
        type: integer
      uptime:
        type: integer
    type: object
  entity.StatsInUnits:
    properties:
      rateIn:
        type: string
      rateOut:
        type: string
      totalIn:
        type: string
      totalOut:
        type: string
    type: object
  entity.UpdateMySettingsRequest:
    properties:
      name:
        type: string
    type: object
  entity.UpdatePeerSettingsRequest:
    properties:
      alias:
        type: string
      domainName:
        type: string
      peerID:
        type: string
    required:
    - alias
    - peerID
    type: object
  kbucket.PeerInfo:
    properties:
      addedAt:
        description: AddedAt is the time this peer was added to the routing table.
        type: string
      id:
        type: string
      lastSuccessfulOutboundQueryAt:
        description: |-
          LastSuccessfulOutboundQueryAt is the time instant at which we last got a
          successful query response from the peer.
        type: string
      lastUsefulAt:
        description: |-
          LastUsefulAt is the time instant at which the peer was last "useful" to us.
          Please see the DHT docs for the definition of usefulness.
        type: string
    type: object
  madns.Resolver:
    type: object
  metrics.Stats:
    properties:
      rateIn:
        type: number
      rateOut:
        type: number
      totalIn:
        type: integer
      totalOut:
        type: integer
    type: object
  p2p.BootstrapPeerDebugInfo:
    properties:
      connections:
        items:
          type: string
        type: array
      error:
        type: string
    type: object
  p2p.ConnectionInfo:
    properties:
      address:
        type: string
      direction:
        type: string
      multiaddr:
        type: string
      opened:
        type: string
      protocol:
        type: string
      relayPeerID:
        type: string
      throughRelay:
        type: boolean
      transient:
        type: boolean
    type: object
  peer.AddrInfo:
    properties:
      addrs:
        items: {}
        type: array
      id:
        type: string
    type: object
host: localhost:8639
info:
  contact: {}
  description: Anywherelan API
  title: Anywherelan API
  version: "0.1"
paths:
  /debug/log:
    get:
      parameters:
      - description: Define number of rows of logs to output. On default and 0 prints
          all.
        in: query
        name: logs
        type: integer
      - description: Print logs from the beginning of logs
        in: query
        name: from_head
        type: boolean
      produces:
      - text/plain
      responses:
        "200":
          description: log text
          schema:
            type: string
      summary: Get logs
      tags:
      - Debug
  /debug/p2p_info:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.P2pDebugInfo'
      summary: Get p2p debug info
      tags:
      - Debug
  /peers/accept_peer:
    post:
      consumes:
      - application/json
      parameters:
      - description: Params
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/entity.FriendRequestReply'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Accept new peer's invitation
      tags:
      - Peers
  /peers/auth_requests:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.AuthRequest'
            type: array
      summary: Get ingoing auth requests
      tags:
      - Peers
  /peers/get_blocked:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/config.BlockedPeer'
            type: array
      summary: Get blocked peers info
      tags:
      - Peers
  /peers/get_known:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.KnownPeersResponse'
            type: array
      summary: Get known peers info
      tags:
      - Peers
  /peers/get_known_peer_settings:
    post:
      consumes:
      - application/json
      parameters:
      - description: Params
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/entity.PeerIDRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/config.KnownPeer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.Error'
      summary: Get known peer settings
      tags:
      - Peers
  /peers/invite_peer:
    post:
      consumes:
      - application/json
      parameters:
      - description: Params
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/entity.FriendRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Invite new peer
      tags:
      - Peers
  /peers/remove:
    post:
      consumes:
      - application/json
      parameters:
      - description: Params
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/entity.PeerIDRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.Error'
      summary: Remove known peer
      tags:
      - Peers
  /peers/update_settings:
    post:
      consumes:
      - application/json
      parameters:
      - description: Params
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/entity.UpdatePeerSettingsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.Error'
      summary: Update peer settings
      tags:
      - Peers
  /settings/export_server_config:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/config.Config'
      summary: Export server configuration
      tags:
      - Settings
  /settings/peer_info:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.PeerInfo'
      summary: Get my peer info
      tags:
      - Settings
  /settings/update:
    post:
      consumes:
      - application/json
      parameters:
      - description: Params
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/entity.UpdateMySettingsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Update my peer info
      tags:
      - Settings
swagger: "2.0"
